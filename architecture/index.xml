<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architectures on Teaching</title><link>https://electrosenpai.github.io/architecture/</link><description>Recent content in Architectures on Teaching</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 29 Dec 2022 11:26:16 +0100</lastBuildDate><atom:link href="https://electrosenpai.github.io/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Plan</title><link>https://electrosenpai.github.io/architecture/plan/</link><pubDate>Thu, 29 Dec 2022 11:26:16 +0100</pubDate><guid>https://electrosenpai.github.io/architecture/plan/</guid><description>Cours d&amp;rsquo;architecture &amp;amp; service web Link to heading Session 1 : Conception d&amp;rsquo;une architecture web Link to heading Les critères de choix d&amp;rsquo;une architecture web (scalabilité, flexibilité, etc.) La modélisation des services web avec les diagrammes de séquence et de cas d&amp;rsquo;utilisation Les patterns d&amp;rsquo;architecture web couramment utilisés (API Gateway, Load Balancer, etc.) Exercice : concevoir une architecture web en utilisant les différents outils vus en cours QCM : connaissances sur la conception d&amp;rsquo;une architecture web Session 2 : Introduction à l&amp;rsquo;architecture web Link to heading Définition de l&amp;rsquo;architecture web et des différents types d&amp;rsquo;architecture (monolithe, microservices, etc.</description></item><item><title>Session 1 : Conception d’une architecture web</title><link>https://electrosenpai.github.io/architecture/lesson1/</link><pubDate>Thu, 29 Dec 2022 10:00:16 +0100</pubDate><guid>https://electrosenpai.github.io/architecture/lesson1/</guid><description>Les critères de choix d&amp;rsquo;une architecture web Link to heading Lorsqu&amp;rsquo;on doit décider quelle architecture adopter pour une application web, il est important de prendre en compte plusieurs critères qui vont influencer sa performance, sa scalabilité et sa flexibilité. Voici quelques exemples de critères à prendre en compte :
Scalabilité : la capacité d&amp;rsquo;un système à s&amp;rsquo;adapter et à évoluer en fonction de la croissance de la demande en termes de ressources, de performance et de fonctionnalités.</description></item><item><title>Session 2 : Introduction à l'architecture web</title><link>https://electrosenpai.github.io/architecture/lesson2/</link><pubDate>Thu, 29 Dec 2022 10:00:16 +0100</pubDate><guid>https://electrosenpai.github.io/architecture/lesson2/</guid><description>Qu&amp;rsquo;est-ce que l&amp;rsquo;architecture web ? Link to heading L&amp;rsquo;architecture web désigne la manière dont les différents éléments d&amp;rsquo;une application web (services, bases de données, front-end, etc.) sont organisés et interagissent entre eux. Elle détermine la façon dont l&amp;rsquo;application web sera conçue, développée, déployée et maintenue.
Qu&amp;rsquo;est ce que du load balancing ? Link to heading Définition générale : Link to heading Le load balancing est une technique utilisée pour répartir la charge de travail sur plusieurs serveurs ou instances de traitement afin d&amp;rsquo;optimiser la performance et la disponibilité d&amp;rsquo;un système.</description></item><item><title>Session 3 : Introduction à l'architecture web</title><link>https://electrosenpai.github.io/architecture/lesson3/</link><pubDate>Thu, 29 Dec 2022 10:00:16 +0100</pubDate><guid>https://electrosenpai.github.io/architecture/lesson3/</guid><description>Les différents éléments d&amp;rsquo;une application web Link to heading Le front end et le backend sont deux parties d&amp;rsquo;une application web qui travaillent ensemble pour fournir une expérience utilisateur cohérente.
Front end Link to heading Le front end, également appelé &amp;ldquo;client&amp;rdquo;, se réfère aux éléments d&amp;rsquo;une application web qui sont visibles et interagissables par l&amp;rsquo;utilisateur. Il comprend généralement du HTML, du CSS et du JavaScript qui sont exécutés dans le navigateur de l&amp;rsquo;utilisateur.</description></item><item><title>Session 4 : Conception d’une architecture web</title><link>https://electrosenpai.github.io/architecture/lesson4/</link><pubDate>Thu, 29 Dec 2022 10:00:16 +0100</pubDate><guid>https://electrosenpai.github.io/architecture/lesson4/</guid><description>Introduction Link to heading Les services web sont de plus en plus utilisés pour offrir des services en ligne, tels que des sites e-commerce, des réseaux sociaux et des applications d&amp;rsquo;entreprise. Pour protéger ces services et les données qu&amp;rsquo;ils utilisent, il est important de mettre en place des mécanismes de sécurité efficaces. Les principales méthodes de sécurisation des services web incluent l&amp;rsquo;authentification, l&amp;rsquo;autorisation, le chiffrement, et l&amp;rsquo;utilisation de HTTPS.</description></item><item><title>Session 5 : Monitoring et logging des services web</title><link>https://electrosenpai.github.io/architecture/lesson5/</link><pubDate>Thu, 29 Dec 2022 10:00:16 +0100</pubDate><guid>https://electrosenpai.github.io/architecture/lesson5/</guid><description>Introduction : Link to heading Le monitoring et le logging sont des pratiques clés pour assurer la disponibilité, la performance et la sécurité des services web.
Monitoring : Link to heading Le monitoring est la surveillance continue d&amp;rsquo;un système ou d&amp;rsquo;une application pour détecter les anomalies et les problèmes potentiels. Il permet de mesurer les performances et les métriques d&amp;rsquo;un système, telles que la charge de traitement, la mémoire utilisée, les entrées/sorties disque, etc.</description></item><item><title>Session 6 : Évolution et maintenance des services web</title><link>https://electrosenpai.github.io/architecture/lesson6/</link><pubDate>Thu, 29 Dec 2022 10:00:16 +0100</pubDate><guid>https://electrosenpai.github.io/architecture/lesson6/</guid><description>Concepts de base Link to heading Architecture des services web Link to heading Les services web sont construits sur une architecture client-serveur, similaire à celle utilisée pour les sites web. Le client (qui peut être un navigateur web, une application mobile, ou un autre service web) envoie une requête à un serveur web, qui traite la requête et renvoie une réponse au client. Les services web peuvent utiliser différents protocoles de communication, tels que HTTP (HyperText Transfer Protocol), SOAP (Simple Object Access Protocol), ou REST (Representational State Transfer).</description></item><item><title>Session 7 : Conteneurisation et docker</title><link>https://electrosenpai.github.io/architecture/lesson7/</link><pubDate>Thu, 29 Dec 2022 10:00:16 +0100</pubDate><guid>https://electrosenpai.github.io/architecture/lesson7/</guid><description>Introduction à la conteneurisation: Link to heading Qu&amp;rsquo;est ce qu&amp;rsquo;un conteneur ? Link to heading Un conteneur est un environnement logiciel qui permet de lancer et exécuter des applications de manière isolée et autonome. Il encapsule les applications, leurs dépendances et leur configuration dans un environnement qui peut être facilement déplacé d&amp;rsquo;un système à un autre. Les conteneurs sont similaires aux machines virtuelles, mais contrairement à ces dernières, ils ne nécessitent pas de système d&amp;rsquo;exploitation virtuel, ils partagent donc le système d&amp;rsquo;exploitation hôte, ce qui les rend plus légers et plus rapides à démarrer.</description></item><item><title>Session 8 : Services web REST et RESTful</title><link>https://electrosenpai.github.io/architecture/lesson8/</link><pubDate>Thu, 29 Dec 2022 10:00:16 +0100</pubDate><guid>https://electrosenpai.github.io/architecture/lesson8/</guid><description>I. Introduction Link to heading Les services web REST et RESTful sont des technologies importantes pour la communication entre les applications. Dans cette partie du cours, nous allons définir ce qu&amp;rsquo;est un service web REST et un service web RESTful, ainsi que leurs objectifs et avantages.
A. Définition des services web REST et RESTful Link to heading Un service web REST (Representational State Transfer) est un type de service web qui utilise le protocole HTTP pour communiquer avec d&amp;rsquo;autres applications.</description></item><item><title>Session 9 : Services web gRPC</title><link>https://electrosenpai.github.io/architecture/lesson9/</link><pubDate>Thu, 29 Dec 2022 10:00:16 +0100</pubDate><guid>https://electrosenpai.github.io/architecture/lesson9/</guid><description>Introduction aux services web gRPC Link to heading gRPC est un framework open source de haut niveau pour les services web qui permet aux développeurs de créer des services web performants et évolutifs. Il utilise une communication à distance à haute vitesse entre des serveurs et des clients. gRPC est un projet de l&amp;rsquo;Open Source Initiative (OSI) et a été développé par Google.
Définition de gRPC Link to heading gRPC est un framework qui permet de créer des services web performants et évolutifs en utilisant la communication à distance.</description></item><item><title/><link>https://electrosenpai.github.io/architecture/http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://electrosenpai.github.io/architecture/http/</guid><description>HTTP (HyperText Transfer Protocol) Link to heading HTTP est un protocole de communication qui permet de transférer du contenu hypertexte (par exemple, des pages web) sur un réseau, principalement sur Internet. Il utilise le modèle client-serveur : le client (par exemple, un navigateur web) envoie une requête au serveur (par exemple, un site web), qui répond en retournant le contenu demandé (par exemple, une page HTML, une image, un fichier).</description></item></channel></rss>